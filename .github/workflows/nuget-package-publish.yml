name: nuget-package-publish

on:
  workflow_call:
    inputs:
      project_name:
        type: string
        required: true
      csproj_path:
        type: string
        required: true
      artifacts_prefix:
        type: string
        required: false
      artifacts_run_id:
        type: string
        required: true
      extra_paths:
        type: string
        required: false
        default: ""
      publish_branch:
        type: string
        required: false
        default: "master"
      publish:
        type: boolean
        required: false
        default: false
      nuget_source:
        type: string
        required: false
        default: "https://api.nuget.org/v3/index.json"
    secrets:
      NUGET_API_KEY:
        required: true

env:
  NUGET_SOURCE: ${{ inputs.nuget_source }}
  CSPROJ_PATH: ${{ inputs.csproj_path }}
  ARTIFACTS_RUN_ID: ${{ inputs.artifacts_run_id }}
  PUBLISH_ENABLED: ${{ inputs.publish }}
  ARTIFACTS_DIR: artifacts
  PROJECT_NAME: ${{ inputs.project_name }}
  ARTIFACTS_PREFIX: ${{ inputs.artifacts_prefix || inputs.project_name }}
  EXTRA_PATHS: "${{ inputs.extra_paths }},LICENSE,LICENSE.md,README.md,NOTICE.md"
  PUBLISH_BRANCH: ${{ inputs.publish_branch }}

jobs:
  pack:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          path: ${{ env.ARTIFACTS_DIR }}
          run-id: ${{ env.ARTIFACTS_RUN_ID }}
          github-token: ${{ github.token }}

      - name: Validate artifacts
        id: validate_artifacts
        run: |
          count=$(find ${{ env.ARTIFACTS_DIR }} -type f | wc -l)
          [ "$count" -gt 0 ] || { echo "::error::No artifacts found"; exit 1; }
          echo "has_artifacts=true" >> $GITHUB_OUTPUT

      - name: Check version change
        id: version_check
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          [ -f "${{ env.CSPROJ_PATH }}" ] || { echo "::error::Project file not found"; exit 1; }

          cur=$(grep -o '<Version>.*</Version>' "${{ env.CSPROJ_PATH }}" | sed 's/<Version>\(.*\)<\/Version>/\1/')
          [ -n "$cur" ] || { echo "version_specified=false" >> $GITHUB_OUTPUT; exit 0; }
          echo "version_specified=true" >> $GITHUB_OUTPUT
          echo "current_version=$cur" >> $GITHUB_OUTPUT

          if [ "${BRANCH_NAME}" != "${{ env.PUBLISH_BRANCH }}" ]; then
            echo "is_publish_branch=false" >> $GITHUB_OUTPUT
            echo "can_publish=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "is_publish_branch=true" >> $GITHUB_OUTPUT

          git fetch --quiet
          if git cat-file -e HEAD~1^{commit} 2>/dev/null; then
            prev=$(git show HEAD~1:"${{ env.CSPROJ_PATH }}" 2>/dev/null | grep -o '<Version>.*</Version>' | sed 's/<Version>\(.*\)<\/Version>/\1/')
          else
            prev=""
          fi

          if [ "$prev" != "$cur" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

          if [ -n "${{ secrets.NUGET_API_KEY }}" ] && [ "$prev" != "$cur" ]; then
            echo "api_key_available=true" >> $GITHUB_OUTPUT
            echo "can_publish=true" >> $GITHUB_OUTPUT
          else
            echo "api_key_available=false" >> $GITHUB_OUTPUT
            echo "can_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Collect rids
        id: collect_rids
        run: |
          prefix="${{ env.ARTIFACTS_PREFIX }}"
          rids=""
          for dir in ${{ env.ARTIFACTS_DIR }}/*; do
            [ -d "$dir" ] || continue
            base=$(basename "$dir")
            [[ "$base" == "$prefix"-* ]] || continue
            rid=${base#"$prefix"-}
            rid=${rid,,}
            rid=${rid//_/-}
            rids="${rids}${rid},"
          done
          rids=${rids%,}
          echo "rid_list=$rids" >> $GITHUB_OUTPUT

      - name: Map rids
        id: map_rids
        uses: Itexoft/devops/.github/actions/nuget-map-rid@master
        with:
          rid_list: ${{ steps.collect_rids.outputs.rid_list }}

      - name: Prepare
        run: |
          set -e
          shopt -s nullglob dotglob

          mkdir -p pkg
          src_dir=$(dirname "${{ env.CSPROJ_PATH }}")
          cp -R "$src_dir"/. pkg/

          IFS=',' read -ra add <<< "${{ env.EXTRA_PATHS }}"
          for p in "${add[@]}"; do
            [ -z "$p" ] || { [ -e "$p" ] && cp -R "$p" pkg/; }
          done

          prefix="${{ env.ARTIFACTS_PREFIX }}"
          IFS=',' read -ra mapped <<< "${{ steps.map_rids.outputs.nuget_rid_list }}"
          idx=0
          mkdir -p pkg/runtimes

          for dir in ${{ env.ARTIFACTS_DIR }}/*; do
            [ -d "$dir" ] || continue

            base=$(basename "$dir")
            [[ "$base" == "$prefix"-* ]] || continue
            rid=${mapped[$idx]}
            idx=$((idx+1))
            [ -z "$rid" ] && continue

            native="pkg/runtimes/$rid/native"
            mkdir -p "$native"
            for f in "$dir"/*; do
              [[ "$f" == *compile_commands.json ]] && continue
              cp -R "$f" "$native/"
            done
          done

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.x
          
      - name: Restore dependencies
        id: restore
        working-directory: pkg
        run: |
          csproj=$(basename "${{ env.CSPROJ_PATH }}")
          echo "csproj=$csproj" >> "$GITHUB_OUTPUT"
          [ -f "$csproj" ] || { echo "::error::CSProj missing in package dir"; exit 1; }
          dotnet restore "$csproj"

      - name: Build
        working-directory: pkg
        run: dotnet build "${{ steps.restore.outputs.csproj }}" -c Release --no-restore
        
      - name: Pack
        working-directory: pkg
        run: dotnet pack "${{ steps.restore.outputs.csproj }}" -c Release -o ../${{ env.ARTIFACTS_DIR }}

      - name: Publish to NuGet
        if: ${{ steps.version_check.outputs.can_publish == 'true' && env.PUBLISH_ENABLED == 'true' }}
        run: |
          for nupkg in ${{ env.ARTIFACTS_DIR }}/*.nupkg; do
            [ -f "$nupkg" ] || { echo "::error::No packages for push"; exit 1; }
            dotnet nuget push "$nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source ${{ env.NUGET_SOURCE }} --skip-duplicate
          done

      - name: Report publish skip reason
        if: ${{ steps.version_check.outputs.can_publish != 'true' || env.PUBLISH_ENABLED != 'true' }}
        run: |
          if [ "${{ env.PUBLISH_ENABLED }}" != "true" ]; then
            echo "::warning::Publish skipped: disabled by flag"
          elif [ "${{ steps.version_check.outputs.version_specified }}" != "true" ]; then
            echo "::warning::Publish skipped: version not specified"
          elif [ "${{ steps.version_check.outputs.is_publish_branch }}" != "true" ]; then
            echo "::warning::Publish skipped: not on ${{ env.PUBLISH_BRANCH }} branch"
          elif [ "${{ steps.version_check.outputs.version_changed }}" != "true" ]; then
            echo "::warning::Publish skipped: version unchanged"
          elif [ "${{ steps.version_check.outputs.api_key_available }}" != "true" ]; then
            echo "::warning::Publish skipped: NuGet API key missing"
          else
            echo "::warning::Publish skipped: can_publish flag false"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-nuget-packages
          path: ${{ env.ARTIFACTS_DIR }}/*.nupkg